name: Python package release

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      contents: write
      id-token: write

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 1 # fetch a sufficient commit history to detect version changes

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install toml
          python -m pip install poetry==1.8.3
          python -m poetry config virtualenvs.create false
          python -m poetry install

      - name: Build package
        run: python -m poetry build

      - name: Get version from pyproject.toml
        run: echo "PACKAGE_VERSION=v$(python -c 'import toml; print(toml.load("pyproject.toml")["tool"]["poetry"]["version"])')" >> $GITHUB_ENV

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true

      - name: Check if release exists
        id: check_release
        run: |
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.PACKAGE_VERSION }}")
          
          if [ "$HTTP_STATUS" -eq "200" ]; then
            echo "Release already exists, skipping creation"
            echo "release_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Release does not exist, will create"
            echo "release_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub release
        id: create_release
        if: steps.check_release.outputs.release_exists == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.PACKAGE_VERSION }}
          release_name: ${{ env.PACKAGE_VERSION }}
          draft: false
          prerelease: false
